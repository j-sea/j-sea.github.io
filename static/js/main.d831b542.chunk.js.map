{"version":3,"sources":["components/elements/SiteHeader/index.tsx","components/pages/PageMain/index.tsx","components/pages/Page404/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["id","to","App","SiteHeader","exact","path","component","PageMain","Page404","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAGe,G,MAAA,kBACd,4BAAQA,GAAG,eACV,6CACA,iDACA,yFACA,gCCJa,G,MAAA,kBACd,oCACC,oEACA,6BACC,4BACC,4BAAI,kBAAC,IAAD,CAAMC,GAAG,sBAAT,0BACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,kBAAT,kDACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,iBAAT,mDACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,eAAT,mDACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,cAAT,iDACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,eAAT,8CACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,kBAAT,2CCXO,G,MAAA,kBACd,oCACC,wHACA,2BACC,kBAAC,IAAD,CAAMA,GAAG,KAAT,iCCgBYC,G,MAjBO,kBACrB,yBAAKF,GAAG,gBACP,kBAACG,EAAD,MACA,0BAAMH,GAAG,aACR,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAYC,IAClC,kBAAC,IAAD,CAAOD,UAAYE,OAItB,4BAAQR,GAAG,eACV,sDCPiBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d831b542.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nexport default () => (\r\n\t<header id=\"site-header\">\r\n\t\t<h1>The Portfolio</h1>\r\n\t\t<p> of Jonathan Chan.</p>\r\n\t\t<p>A multi-disciplined programmer with a penchant for detail.</p>\r\n\t\t<hr />\r\n\t</header>\r\n);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './style.css';\r\n\r\nexport default () => (\r\n\t<>\r\n\t\t<p>What would you like to know about me?</p>\r\n\t\t<nav>\r\n\t\t\t<ul>\r\n\t\t\t\t<li><Link to=\"/general/interests\">What makes you human?</Link></li>\r\n\t\t\t\t<li><Link to=\"/web/interests\">What sparks your interest in web development?</Link></li>\r\n\t\t\t\t<li><Link to=\"/web/projects\">What are your web development accomplishments?</Link></li>\r\n\t\t\t\t<li><Link to=\"/web/future\">What are your future plans in web development?</Link></li>\r\n\t\t\t\t<li><Link to=\"/web/learn\">What can you teach me about web development?</Link></li>\r\n\t\t\t\t<li><Link to=\"/game/about\">What about your past in game development?</Link></li>\r\n\t\t\t\t<li><Link to=\"/general/learn\">Where can I learn more about you?</Link></li>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t</>\r\n);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './style.css';\r\n\r\nexport default () => (\r\n\t<>\r\n\t\t<p>The page you're trying to view does not exist! Did you just enter an alternate dimension?</p>\r\n\t\t<p>\r\n\t\t\t<Link to=\"/\">Go to the main pageâ€¦</Link>\r\n\t\t</p>\r\n\t</>\r\n);","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport SiteHeader from './components/elements/SiteHeader';\nimport PageMain from './components/pages/PageMain';\nimport Page404 from './components/pages/Page404';\nimport './App.css';\n\nconst App: React.FC = () => (\n\t<div id=\"site-wrapper\">\n\t\t<SiteHeader />\n\t\t<main id=\"site-main\">\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={ PageMain } />\n\t\t\t\t\t<Route component={ Page404 } />\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</main>\n\t\t<footer id=\"site-footer\">\n\t\t\t<p>&copy; Copyright 2019</p>\n\t\t</footer>\n\t</div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}